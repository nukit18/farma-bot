import os

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart

from keyboards.default.menu_keyboard import menu_keyboard
from keyboards.default.startmenu_keyboard import startmenu_keyboard
from keyboards.inline.sex_keyboard import sex_keyboard
from loader import dp, bot
from utils.db_api import quick_cmd_users


@dp.message_handler(CommandStart())
async def start(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n", reply_markup=startmenu_keyboard)
    path = os.path.abspath(os.path.join(os.getcwd(), "")) + "/photo-data/–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.png"
    await bot.send_photo(message.from_user.id, open(path, 'rb'))


@dp.message_handler(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def registration(message: types.Message, state: FSMContext):
    user = await quick_cmd_users.select_user(int(message.from_user.id))
    if user:
        if not user.active:
            await quick_cmd_users.on_user(int(message.from_user.id))
            await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=menu_keyboard)
            return
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=menu_keyboard)
        return
    path = os.path.abspath(os.path.join(os.getcwd(), "")) + "/photo-data/–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ.png"
    await bot.send_photo(message.from_user.id, open(path, 'rb'))
    await message.answer("–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ, –ø—Ä–æ –º–µ–Ω—è —Ç—ã —É–∂–µ —É–∑–Ω–∞–ª, —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å üòé –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é üëáüèª")
    await state.set_state("input_fullname")


@dp.message_handler(state="input_fullname")
async def input_fullname(message: types.Message, state: FSMContext):
    await state.update_data(fullname=message.text)
    await message.answer("–Ø —Ä–∞–¥ –ø–æ–º–æ–≥–∞—Ç—å –≤—Å–µ–º! –ù–æ –∫–∞–∂–¥—ã–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–µ–Ω ‚ò∫Ô∏è –° –∫–µ–º –º—ã –∏–º–µ–µ–º –¥–µ–ª–æ?", reply_markup=sex_keyboard)
    await state.set_state("input_sex")


@dp.callback_query_handler(state="input_sex")
async def input_sex(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    await state.update_data(sex=call.data)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state("input_age")


@dp.message_handler(state="input_age")
async def input_age(message: types.Message, state: FSMContext):
    try:
        a = int(message.text)
    except:
        await message.answer("–û–π-–æ–π, –≤–æ–∑—Ä–∞—Å—Ç –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! ")
        return
    await state.update_data(age=message.text)
    await message.answer("–ù–µ –±—É–¥—É –¥–æ–ª–≥–æ –º—É—á–∏—Ç—å, –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å! üò± –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≤–µ—Å üëáüèª")
    await state.set_state("input_weight")


@dp.message_handler(state="input_weight")
async def input_weight(message: types.Message, state: FSMContext):
    try:
        a = int(message.text)
    except:
        await message.answer("–û–π-–æ–π, –≤–µ—Å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤ –∫–≥, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! ")
        return
    data = await state.get_data()
    await quick_cmd_users.add_user(user_id=int(message.from_user.id), fullname=data.get("fullname"),
                                   sex=data.get("sex"), age=int(data.get("age")), weight=int(message.text))
    await state.reset_data()
    await state.finish()
    await message.answer("–í–æ—Ç –∏ –≤—Å–µ! –¢–≤–æ—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å –º—ã ‚Äî –¥—Ä—É–∑—å—è ‚ù§Ô∏è")
    await message.answer("–ú–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º –º–µ–Ω—é –Ω–∏–∂–µ üëáüèª",
                         reply_markup=menu_keyboard)
    path = os.path.abspath(os.path.join(os.getcwd(), "")) + "/photo-data/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.png"
    await bot.send_photo(message.from_user.id, open(path, 'rb'))
