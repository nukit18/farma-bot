import datetime
import os

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

from keyboards.inline.all_confirm_keyboard import confirm_all_keyboard
from keyboards.inline.confirm_keyboard import confirm_keyboard
from loader import dp, bot
from utils.db_api import quick_cmd_courses, quick_cmd_users


@dp.message_handler(text="–î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å")
async def add_course(message: types.Message, state: FSMContext):
    user = await quick_cmd_users.select_user(int(message.from_user.id))
    if not user or not user.active:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n–ü—Ä–æ–ø–∏—à–∏—Ç–µ /start")
        return
    await message.answer("–ü–æ—Ä–∞ –Ω–∞—á–∞—Ç—å –ª–µ—á–µ–Ω–∏–µ! ‚úÖ –î–∞–≤–∞–π —É–∑–Ω–∞—ë–º, —á—Ç–æ –ø—Ä–æ–ø–∏—Å–∞–ª —Ç–µ–±–µ –≤—Ä–∞—á, –∫–∞–∫–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏ –≤ –∫–∞–∫–æ–π –¥–æ–∑–∏—Ä–æ–≤–∫–µ. –°–∫–∞–∂–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ? üëáüèª")
    path = os.path.abspath(os.path.join(os.getcwd(), "")) + "/photo-data/–ù–∞—á–∞—Ç—å –∫—É—Ä—Å.png"
    await bot.send_photo(message.from_user.id, open(path, 'rb'))
    await state.set_state("input_name")


@dp.message_handler(state="input_name")
async def input_name(message: types.Message, state: FSMContext):
    await state.update_data(name_medicine=message.text)
    await message.answer("–•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏—Ç–µ –≤ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫—Ä–∞—Å—Ç–≤–æ:")
    await state.set_state("input_dose")


@dp.message_handler(state="input_dose")
async def input_dose(message: types.Message, state: FSMContext):
    await state.update_data(dose=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
                         "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú")
    await state.set_state("input_times")


@dp.callback_query_handler(state="input_times")
async def confirm_input_times(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    await call.message.answer("–û–∫–µ–π, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞:")
    await state.set_state("input_duration")


@dp.message_handler(state="input_times")
async def input_times_ms(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        time_str = str(message.text).split(":")
        int(time_str[0])
        int(time_str[1])
        time = datetime.time(hour=int(time_str[0]), minute=int(time_str[1]))
    except:
        await message.answer("–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è —Ç—ã –Ω–µ —Ç–∞–∫ –≤–≤—ë–ª –≤—Ä–µ–º—è, –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")
        return
    if data.get("times"):
        array = data.get("times")
        array.append(time)
        await state.update_data(times=array)
    else:
        array = [time]
        await state.update_data(times=array)
        await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è, –µ—Å–ª–∏ –≤–≤–æ–¥ –∑–∞–∫–æ–Ω—á–µ–Ω, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ \"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\"",
                             reply_markup=confirm_keyboard)


@dp.message_handler(state="input_duration")
async def input_duration(message: types.Message, state: FSMContext):
    try:
        a = int(message.text)
    except:
        await message.answer("–û–π-–æ–π, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–∏—Å–ª–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! ")
        return
    await state.update_data(duration=message.text)
    data = await state.get_data()
    name_medicine = data.get("name_medicine")
    dose = data.get("dose")
    times = data.get("times")
    new_times = ""
    for time in times:
        new_times += str(time)[:5] + ", "
    duration = data.get("duration")

    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n"
                         f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name_medicine}\n"
                         f"–î–æ–∑–∞: {dose}\n"
                         f"–í—Ä–µ–º—è: {new_times}\n"
                         f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}", reply_markup=confirm_all_keyboard)
    await state.set_state("confirm")


@dp.callback_query_handler(state="confirm")
async def finish(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    data = await state.get_data()
    cb_data = call.data
    if cb_data == "confirm_all":
        user_id = call.from_user.id
        name_medicine = data.get("name_medicine")
        dose = data.get("dose")
        times = data.get("times")
        duration = data.get("duration")
        await quick_cmd_courses.add_course(user_id=int(user_id), name_medicine=name_medicine, dose=dose, times=times,
                                           duration=int(duration))
        await call.message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ú—ã –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –æ –ª–µ—á–µ–Ω–∏–∏ –∏ —Å–∫–æ—Ä–µ–µ –≤—ã–∑–¥–æ—Ä–æ–≤–µ—Ç—å ‚ù§Ô∏èüôèüèª")
    else:
        await call.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤–≤–æ–¥!")
    await state.reset_data()
    await state.finish()
